First of all, let's talk about architecture. As soon as generation short url is less common than usage of that url, 
I would isolate them in different microservices. So, I would have two microservices on the backend which could be 
scaled separately. On top of that, as first tier, I would add Load Balancer, which can also perform security task, 
not only balancing the load. Then I would change the db to the Cassandra for storing short-long url pairs. 
After that, I would separate db due to master-slave replication pattern, alongside I would use the short URL as 
the document key to optimize lookup speed. As for retention policy, I would retain data for 2 month, if there aren't 
new requests of long url with shortened one, and then archive and delete from current dbs.

As for url generation - I've already used Base64Url encoder, but for scaling I would change only input for that encoder.
Right now I use simple hashcode() method of String class to convert long url into hashed value and than convert it via Base64Url.
However there are only 4 bln of possible values without collitions, which is only 11 hours of work with 100 000 requests per sec.
Therefore I would replace this algorithm with another ID generator (UUID e.g.).